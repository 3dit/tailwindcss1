// src/app/mount-button.directive.ts
import { Directive, ElementRef, EventEmitter, OnDestroy, OnInit, Output, Renderer2 } from '@angular/core';

@Directive({
  selector: '[appMountButton]',
  standalone: true
})
export class MountButtonDirective implements OnInit, OnDestroy {
  @Output() clicked = new EventEmitter<MouseEvent>();

  private btn!: HTMLButtonElement;
  private removeListener?: () => void;

  constructor(private host: ElementRef<HTMLElement>, private r: Renderer2) {}

  ngOnInit(): void {
    // Clear host content (optional)
    this.host.nativeElement.innerHTML = '';

    // Create button
    this.btn = this.r.createElement('button');
    this.r.addClass(this.btn, 'app-mount-button');
    this.r.setAttribute(this.btn, 'type', 'button');
    this.r.setProperty(this.btn, 'textContent', 'Click (generated by directive)');

    // Style (demo only)
    this.r.setStyle(this.btn, 'padding', '0.5rem 1rem');
    this.r.setStyle(this.btn, 'border', '2px solid #2563eb');
    this.r.setStyle(this.btn, 'borderRadius', '0.5rem');
    this.r.setStyle(this.btn, 'background', 'white');
    this.r.setStyle(this.btn, 'color', '#2563eb');
    this.r.setStyle(this.btn, 'cursor', 'pointer');

    // Append to host
    this.r.appendChild(this.host.nativeElement, this.btn);

    // Listen to events
    this.removeListener = this.r.listen(this.btn, 'click', (e: MouseEvent) => {
      this.clicked.emit(e);
    });
  }

  ngOnDestroy(): void {
    this.removeListener?.();
    if (this.btn) {
      this.r.removeChild(this.host.nativeElement, this.btn);
    }
  }
}
